import os
import sys

import rtconfig 

sconstruct = File('SConstruct')
fn = sconstruct.rfile()
name = fn.name
building_dir = os.path.dirname(fn.abspath)
program_dir  = r'../bin'

from rtconfig import RTT_ROOT
from rtconfig import BSP_ROOT

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools'), BSP_ROOT]
from building import *
from rtua import GetCPPPATH
from rtua import GetCPPDEFINES

Export('RTT_ROOT')
Export('BSP_ROOT')

# add target option
AddOption('--app',
  dest='app',
  nargs=1, type='string',
  action='store',
  metavar='DIR',
  help='installation prefix')

# add target option
AddOption('--type',
  dest='type',
  nargs=1, type='string',
  action='store',
  metavar='DIR',
  help='installation prefix')

if GetOption('type') == 'ext':
    linkflags = rtconfig.LFLAGS + ' -e 0'
else:
    linkflags = rtconfig.LFLAGS + ' -e main'

CPPPATH = GetCPPPATH(BSP_ROOT, RTT_ROOT)

env = Environment(tools = ['mingw'],
        AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
        CC = rtconfig.CC, CCFLAGS = rtconfig.CFLAGS,
        CXX = rtconfig.CXX, AR = rtconfig.AR, ARFLAGS = '-rc',
        LINK = rtconfig.LINK, LINKFLAGS = linkflags,
        CPPPATH = CPPPATH)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

PrepareModuleBuilding(env, RTT_ROOT)

app = GetOption('app')
if app:
    objs = SConscript(os.path.join(app, 'SConscript'))
    TARGET = os.path.join(app , app + '.' + rtconfig.TARGET_EXT)

    # build program 
    target = env.Program(TARGET, objs)
    env.Command("$TARGET", target, action = Copy(program_dir, TARGET))
